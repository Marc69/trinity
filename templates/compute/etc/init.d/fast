#!/bin/sh
#
#       /etc/init.d/fast
#
#       Fast containers
#
# chkconfig:   2345 99 99
# description: Fast container

### BEGIN INIT INFO
# Provides:       fast-container
# Required-Start: docker
# Required-Stop:
# Should-Start:
# Should-Stop:
# Default-Start: 2 3 4 5
# Default-Stop:  0 1 6
# Short-Description: start fast
# Description: Start the fast container (if it is not started by docker already).
### END INIT INFO

# Source function library.
. /etc/rc.d/init.d/functions

configure_network() {
    IP=$(ip addr show dev eth0 scope global | grep inet | awk -F' ' '{print $2}')
    if [ -z "$IP" ]; then
       echo "No IP found on eth0, assume we have been here before. DRY!"
       return
    fi

    if ! ifconfig docker0 > /dev/null 2>&1; then
       echo "Interface docker0 not found. Please start docker first."
       exit 1
    fi

    GW=$(ip addr show dev docker0 scope global | grep inet | awk -F' ' '{print $2}')

    IP3_4=$(echo $IP | awk -F'/' '{print $1}' | awk -F'.' '{print $2"."$4}')
    IP3_4_GW=$(echo $IP | awk -F'/' '{print $1}' | awk -F'.' '{print $2+127"."$4}')

    # setup two interfaces docker0 with the gateway interface and docker0:0 in the bridge
    ip addr flush dev docker0
    ip addr add 172.17.${IP3_4_GW}/16 dev docker0
    ifconfig docker0:0 ${IP}

    ip addr flush dev eth0
    brctl addif docker0 eth0
    route add default gw master
}

start_container() {
    GW=$(ip addr show dev docker0 scope global | grep "global docker0$" | awk -F' ' '{print $2}' | awk -F'/' '{print $1}' )
    IP=$(ip addr show dev docker0 scope global | grep docker0:0 | awk -F' ' '{print $2}')

    IP3_4=$(echo $IP | awk -F'/' '{print $1}' | awk -F'.' '{print $3"."$4}')

    HOSTNAME=$(hostname | sed -e 's/node/c/' -e 's/.cluster//')

    docker run \
        -n=false \
        -v /dev/infiniband:/dev/infiniband \
        --privileged \
        --lxc-conf="lxc.network.type = veth" \
        --lxc-conf="lxc.network.ipv4 = 172.17.${IP3_4}/16" \
        --lxc-conf="lxc.network.ipv4.gateway = ${GW}" \
        --lxc-conf="lxc.network.link = docker0" \
        --lxc-conf="lxc.network.name = eth0" \
        --lxc-conf="lxc.network.flags = up" \
        -i -t -d -h ${HOSTNAME} controller.cluster:5000/container /bin/bash
}

case "$1" in
    start)
        configure_network
        start_container
        ;;
    *)
        echo $"Usage: $0 {start}"
        exit 2
esac


