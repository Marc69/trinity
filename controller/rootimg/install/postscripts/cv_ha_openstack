#! /usr/bin/bash
##description    : The third round of High Availability.
##                 This will setup:
##                 1. Pacemaker configuration for the OpenStack Controller services
##                 This needs to be called after cv_install_dockerize.
##                 TODO: add openstack and trinity_api to this setup (contents of cv_install_openstack_on_controller)
##author         : Hans Then
##email          : hans.then@clustervision

#--------------------------------------------------------------------------
# Setup galera password and initial databases
#--------------------------------------------------------------------------

set -x
systemctl start docker
systemctl start galera
# extract the root password from the galera container
for i in {300..0}; do
    password=$(docker exec galera cat /root/.mysql_secret | head -1 | awk '{print $NF}')
    if docker exec galera mysqladmin -u root -p"${password}" password "system" &> /dev/null; then
        break
    fi
    echo 'MySQL waiting to reset password . . .'
    sleep 3
done
if [[ "$i" = 0 ]]; then
    echo >&2 'MySQL reset password failed.'
    exit 1
fi

mysql=( mysql --protocol=tcp -uroot -psystem)
"${mysql[@]}" <<-EOSQL
    set @@session.sql_log_bin=0;
    create database keystone;
    grant all privileges on keystone.* to 'keystone'@'localhost' identified by 'system';
    grant all privileges on keystone.* to 'keystone'@'%'         identified by 'system';
    create database glance;
    grant all privileges on glance.* to 'glance'@'localhost'     identified by 'system';
    grant all privileges on glance.* to 'glance'@'%'             identified by 'system';
    create database nova;
    grant all privileges on nova.* to 'nova'@'localhost'         identified by 'system';
    grant all privileges on nova.* to 'nova'@'%'                 identified by 'system';
    create database cinder;
    grant all privileges on cinder.* to 'cinder'@'localhost'     identified by 'system';
    grant all privileges on cinder.* to 'cinder'@'%'             identified by 'system';
    flush privileges ;
EOSQL

#--------------------------------------------------------------------------
# Setup pacemaker
#--------------------------------------------------------------------------
pcs cluster cib config
# Setup high availability for the docker containers
pcs -f config resource create docker systemd:docker op monitor interval="37s"
pcs -f config resource clone docker clone-node-max=1 notify=false

pcs -f config resource create galera systemd:galera op monitor interval="37s"
pcs -f config resource clone galera clone-node-max=1 notify=false

pcs -f config resource create rabbitmq systemd:rabbitmq op monitor interval="37s"
pcs -f config resource create keystone systemd:keystone op monitor interval="37s"
pcs -f config resource create glance systemd:glance op monitor interval="37s"
pcs -f config resource create nova-controller systemd:nova-controller op monitor interval="37s"

pcs -f config resource group add grp_OpenStack rabbitmq keystone glance nova-controller
#pcs -f config resource clone grp_OpenStack clone-node-max=1 notify=false

pcs -f config constraint colocation add grp_OpenStack ip
pcs -f config constraint order start galera-clone then start grp_OpenStack

pcs cluster cib-push config

#--------------------------------------------------------------------------
# Create keystone endpoints for glance etc
#--------------------------------------------------------------------------

# wait for slapd
for i in {300..0}; do
    ldapsearch -H ldap://localhost -x -b dc=local &>/dev/null; [[ $? != 255 ]] && break;
    echo "Waiting for ldap to come up!"
    sleep 1
done
[[ ${i} == 0 ]] && echo "Timeout waiting for ldap to come up"

keystone_endpoint="http://controller.cluster:35357/v2.0"
for i in {300..0}; do
    if curl -s ${keystone_endpoint}; then 
        /tmp/trinity/keystone/keystone-setup.sh
        /tmp/trinity/keystone/glance-setup.sh
        /tmp/trinity/keystone/nova-setup.sh
        echo "Applied keystone initialization scripts"
        break
    fi
    echo "Waiting for keystone to come up!"
    sleep 5
done
[[ ${i} == 0 ]] && echo "Timeout waiting for keystone to come up"

#read ETH0 ETH1 ETH2 <<<$(ls /sys/class/net/ | grep "^e" | sort | head -3)
ETH1=$(ip route get 8.8.8.8 | grep -oP 'dev \K\S+')
ETH2=$(ip route get 10.141.0.0 | grep -oP 'dev \K\S+')

BRIDGE="br100"
PRI_NIC=${ETH2}
source /etc/profile.d/xcat.sh
sed -e "s/<TENANT>/admin/g" \
    -e "s/<USER>/admin/g" \
    -e "s/<PASSWORD>/system/g" \
    -e "s/<OPENSTACK>/controller/g" \
    /trinity/openstack/keystonerc > /root/keystonerc_admin
chmod go-rw /root/keystonerc_admin
scp /root/keystonerc_admin controller-2.cluster:/root/keystonerc_admin
source /root/keystonerc_admin

#-- Create the Flat Network
systemctl start openstack-nova-network

NETWORK_LABEL="novanetwork"
nova network-create \
       --fixed-range-v4 192.168.32.0/24 \
       --fixed-cidr 192.168.32.0/24 \
       --bridge-interface ${PRI_NIC} \
       --multi-host T \
       --bridge ${BRIDGE} \
       ${NETWORK_LABEL}

#-- Download the base login node image (CentOS cloud image) and upload it to glance
# We have a sitemaster, copy from master node.
mkdir -p /trinity/qcows/
CLOUD_IMAGE="/trinity/qcows/login.qcow2"
# FIXME: Find a better location. We cannot assume /tmp/trinity is still mounted here.
cp /tmp/trinity/qcows/login.qcow2 ${CLOUD_IMAGE}
CLOUD_IMAGE_FORMAT="qcow2"
CLOUD_CONTAINER_FORMAT="bare"
LOGIN_IMAGE="login"
LOGIN_SETUP="/trinity/login/mini-setup.sh"

openstack image create \
    --disk-format "${CLOUD_IMAGE_FORMAT}" \
    --container-format "${CLOUD_CONTAINER_FORMAT}" \
    --public \
    --file "${CLOUD_IMAGE}" \
    "${LOGIN_IMAGE}"

nova secgroup-add-rule default tcp 1 65535 0.0.0.0/0
nova secgroup-add-rule default icmp -1 -1 0.0.0.0/0

systemctl daemon-reload

echo "$0 finished @ $(date)" >> /var/log/postinstall.log
