#! /usr/bin/bash
##title          : cv_install_openstack
##description    : Installs an openstack node. It also installs the Trinity API server, 
##                 the client and the dashboard additions
##                 and then start the API server # service trinity_api start
##author         : Hans Then & Abhishek Mukherjee
##email          : hans.then@clustervision
##                 abhishek.mukherjee@clustervision.com


#--------------------------------------------------------------------------------------
# copy the required files from the controller to the root file system
#--------------------------------------------------------------------------------------
mkdir /trinity
mount controller:/trinity /trinity       
cp -LrT /trinity/openstack/rootimg/ /

systemctl stop NetworkManager
systemctl disable NetworkManager

yum -y install openstack-packstack

sed "s/=127.0.0.1/=$(hostname -I)/g" //xcatpost/packstack-answers.txt > /tmp/packstack-answers.txt
read ETH1 ETH2 ETH3 <<<$(ls /sys/class/net/ | grep "^e" | sort | head -3)
sed -e "s/\<eno1\>/$ETH1/g" -e "s/\<eno2\>/$ETH2/g"  -e "s/\<eno3\>/$ETH3/g" -i /tmp/packstack-answers.txt

export HOME=/root
packstack --answer-file /tmp/packstack-answers.txt
#packstack --allinone
# HTH: not required to inject passwords and keys, metadataservice is supposed to handle that.
#sed -i "s/^#\?inject_password=.*/inject_password=true/g" /etc/nova/nova.conf
#sed -i "s/^#\?inject_key=.*/inject_key=true/g" /etc/nova/nova.conf
sed -i "s/^#\?service_metadata_proxy=.*/service_metadata_proxy=False/g" /etc/nova/nova.conf
sed -i "s/'can_set_password':.*/'can_set_password': False,/g" /etc/openstack-dashboard/local_settings
openstack-config --set /etc/nova/nova.conf DEFAULT resume_guests_state_on_host_boot true
openstack-config --set /etc/nova/nova.conf DEFAULT allow_same_net_traffic true
openstack-config --set /etc/nova/nova.conf DEFAULT dhcp_domain  

systemctl restart openstack-nova-compute
systemctl restart openstack-nova-api
systemctl restart openstack-nova-network

source ~/keystonerc_admin
nova floating-ip-bulk-delete 10.3.4.0/22

# Create the all the VLANS
##/usr/sbin/make_nw /root/keystonerc_admin ${ETH1}

# Workaround for bug #67
killall dhclient
systemctl start network

mkdir -p /home
mkdir -p /cluster
mkdir -p /trinity

##AM: Will use the HERE doc for now
##    we do not want file merge logic in the postbootscript
##sort -u /etc/fstab* | \
##  awk '
##    BEGIN {print "# Created by trinity";}; \
##    {if ($0!~/^\#/ && $0 !~/^$/) {if ($0~/nfs/) {nfs=nfs RS $0} else {local=local RS $0}}}; \
##    END {print "# local filesystems" local RS "# remote filesystems" nfs}
##  ' > /tmp/fstab
##rm -f /etc/fstab*
##mv -f /tmp/fstab /etc/fstab

# FIXME: use a rootimg mechanism for this.
##AM: This is an append, cannot use rootimg mechanism for now
if ! grep controller:/cluster /etc/fstab > /dev/null; then
cat << END >> /etc/fstab
controller:/cluster /cluster nfs rsize=8192,wsize=8192,timeo=14,intr
controller:/trinity /trinity nfs rsize=8192,wsize=8192,timeo=14,intr
controller:/home /home nfs rsize=8192,wsize=8192,timeo=14,intr
END
fi
mount -a

#--------------------------------------------------
# Install the API server
#--------------------------------------------------
# Assumes that /cluster and  /home are already mounted

# The Trinity API server init script requires the Linux Standard Base
yum -y install redhat-lsb

# The Trinity API server needs python Bottle
yum -y install epel-release
yum -y install python-pip
pip install bottle
pip install cherrypy

# Trinity API setup
cd /opt/trinity/trinity_api
python setup.py install
cd -
sed "s/127.0.0.1/$(hostname -I| awk '{print $1}')/g" /etc/trinity/trinity_api.conf > /tmp/trinity_api.conf
mv -f /tmp/trinity_api.conf /etc/trinity/trinity_api.conf
mkdir -p /var/log/trinity
#mkdir -p /var/run/trinity

# Start the API
service trinity_api start
chkconfig trinity_api on

#--------------------------------------------------
# Install the python client
#--------------------------------------------------
cd /opt/trinity/trinity_client
python setup.py install
cd -
sed "s/127.0.0.1/$(hostname -I| awk '{print $1}')/g" /etc/trinity/trinity_client.conf > /tmp/trinity_client.conf
mv -f /tmp/trinity_client.conf /etc/trinity/trinity_client.conf

#--------------------------------------------------
# Install the dashboard additions
#--------------------------------------------------
cd /opt/trinity/trinity_dashboard
sh setup.sh
cd -

# This is to fix a bug in the httpd configuration needed for Juno
echo 'Include "/etc/httpd/conf.modules.d/*.conf"' >> /etc/httpd/conf/httpd.conf

# Ensure that the dashboard is accessible using the short hostname
sed -e "s/ServerAlias openstack.cluster/ServerAlias openstack/g" -i /etc/httpd/conf.d/15-horizon_vhost.conf

service httpd restart


#-----------------------------------------------------------------------------------
# Download the base login node image (CentOS cloud image) and upload it to glance
#-----------------------------------------------------------------------------------
CLOUD_IMAGE_URL="http://cloud.centos.org/centos/7/images/CentOS-7-x86_64-GenericCloud.qcow2"
CLOUD_IMAGE="CentOS-7-x86_64-GenericCloud.qcow2"
CLOUD_IMAGE_FORMAT="qcow2"
CLOUD_CONTAINER_FORMAT="bare"
LOGIN_IMAGE="login"
wget -nv ${CLOUD_IMAGE_URL}
glance image-create \
         --name "${LOGIN_IMAGE}" \
         --disk-format "${CLOUD_IMAGE_FORMAT}" \
         --container-format "${CLOUD_CONTAINER_FORMAT}" \
         --is-public True \
         --file "${CLOUD_IMAGE}"




#-----------------------------------------------------------------------------------
# Create the default cluster
#-----------------------------------------------------------------------------------
FIRST_TENANT="hpc"
FIRST_USER="hpc-admin"
FIRST_PASS="system"
FIRST_CLUSTER="hpc"
FIRST_POOL="login_hpc"
FIRST_NETWORK="net_17216"
## FIRST_FLOATING="172.16.255.254"
LOGIN_SETUP="/trinity/login/setup.sh"
LOGIN_DATA="/root/.login_data"
LOGIN_NODE="login.hpc"
SKEL=".skel"

keystone tenant-create --name ${FIRST_TENANT}
keystone user-create --name ${FIRST_USER} --tenant ${FIRST_TENANT} --pass ${FIRST_PASS}
## nova floating-ip-bulk-create --pool ${FIRST_POOL} ${FIRST_FLOATING}
mkdir -p /cluster/${FIRST_CLUSTER}
cp -LTr /cluster/${SKEL}/ /cluster/${FIRST_CLUSTER}/

mkdir -p /home/${FIRST_CLUSTER}

useradd -u 1002 -U munge --no-create-home
mkdir -p /cluster/${FIRST_CLUSTER}/etc/munge
[ -e  /cluster/${FIRST_CLUSTER}/etc/munge/munge.key ] && rm /cluster/${FIRST_CLUSTER}/etc/munge/munge.key
dd if=/dev/urandom bs=1 count=1024 > /cluster/${FIRST_CLUSTER}/etc/munge/munge.key
chown -R munge:munge /cluster/${FIRST_CLUSTER}/etc/munge
chmod u=rwx,go= /cluster/${FIRST_CLUSTER}/etc/munge
chmod u=r,go=   /cluster/${FIRST_CLUSTER}/etc/munge/munge.key

## nodes=$(curl -k 'https://controller/xcatws/groups/vc-a/attrs/members?userName=trinity&password=trinity&pretty=1' | awk -F: '{if (NR==3) {print $2}}' | sed 's/"//g')

#------------------------------------------------------------------------------
# Grabs all the compute nodes from the xcat database, and adds the 
# corresponding container definitions to the slurm-nodes.conf file
#------------------------------------------------------------------------------

nodes=$(curl -k -s 'https://controller/xcatws/groups/compute/attrs/members?userName=trinity&password=trinity&pretty=1' | awk -F: '{if (NR==3) {print $2}}' | sed 's/"//g')
containers=$(echo ${nodes} | tr "," "\n" | awk '$0 ~ /node/ {print}' | sed -e "s/node/c/g" | tr "\n" ",")
sed -e "s/<NODES>/${containers}/g" -i /cluster/${FIRST_CLUSTER}/etc/slurm/slurm-nodes.conf
chmod u=rwx,go=rx /cluster/${FIRST_CLUSTER}/etc/slurm
chmod u=rw,go=rx  /cluster/${FIRST_CLUSTER}/etc/slurm/slurm.conf
chmod u=rw,go=r   /cluster/${FIRST_CLUSTER}/etc/slurm/slurm-nodes.conf
chmod ug=rw,o=r   /cluster/${FIRST_CLUSTER}/etc/slurm/slurm-user.conf


## sed -e "s/FLOATING_IP=127.0.0.1/FLOATING_IP=${FIRST_FLOATING}/g" \
##    -e "s/vc-a/${FIRST_CLUSTER}/g" \
##    -i "${LOGIN_DATA}"

## sed -e "s/vc-a/${FIRST_CLUSTER}/g" \
##     -i "${LOGIN_DATA}"

tenant_id=$(keystone tenant-get ${FIRST_CLUSTER} |grep -w id | awk -F "|" '{gsub(/^[ \t]+|[ \t]+$/, "", $3); print $3}')
first="172"
second="16"
xy="${first}${second}"
prefix="${first}.${second}"
name="net_${xy}"
cidr="${prefix}.0.0/16"
vlan="10${second}"
bridge="br10${second}"
gateway="${prefix}.255.1"
dhcp_server="${prefix}.255.1"
allowed_start="${prefix}.255.1"
nova network-create ${name} \
                    --project-id ${tenant_id} \
                    --fixed-range-v4 ${cidr} \
                    --vlan  ${vlan}\
                    --gateway ${gateway} \
                    --dhcp-server ${dhcp_server} \
                    --bridge ${bridge} \
                    --bridge-interface ${bridge_interface} \
                    --allowed-start ${allowed_start}

#nova-manage network modify 172.16.0.0/16 --project ${tenant_id} 

sed -e "s/<TENANT>/${FIRST_TENANT}/g" \
    -e "s/<USER>/${FIRST_USER}/g" \
    -e "s/<PASSWORD>/${FIRST_PASS}/g" \
    -e "s/<OPENSTACK>/$(hostname -I | awk '{print $1}')/g" \
    /trinity/openstack/keystonerc > /root/keystonerc_${FIRST_TENANT}

source /root/keystonerc_${FIRST_TENANT}
cp ${LOGIN_SETUP} ${LOGIN_DATA}
nova boot --flavor 2 --image ${LOGIN_IMAGE} --user-data ${LOGIN_DATA} ${LOGIN_NODE}

#------------------------------------------------------------------------------
# Now add the containers to the bridge hosts file
#------------------------------------------------------------------------------
source /root/keystonerc_admin
tenant=${FIRST_TENANT}
bridge=$(nova network-show ${FIRST_NETWORK} | grep -w bridge | awk -F "|" '{gsub(/^[ \t]+|[ \t]+$/, "", $3); print $3}')
hosts=""
for container in $(echo ${containers} | tr "," " "); do
  hostname=${container}.${tenant}
  num=$(echo ${container//[!0-9]/}) ; ip=172.16.$(( num/256 )).$(( num%256 ))
  hosts="${hosts}${hostname}=${ip},"
done
/usr/sbin/update_hosts add ${bridge} ${hosts}

## We do not need this anymore with VLAN networking
## nova floating-ip-create ${FIRST_POOL}
## nova secgroup-add-rule default tcp 1 65535 0.0.0.0/0
## nova secgroup-add-rule default icmp -1 -1 0.0.0.0/0 
## nova boot --flavor 2 --image ${LOGIN_IMAGE} --security-groups default --user-data ${LOGIN_DATA} ${LOGIN_NODE}
## sleep 5
## nova floating-ip-associate ${LOGIN_NODE} ${FIRST_FLOATING}
