#!/usr/bin/env bash
##title          : cv_install_dockerize
##description    : Sets up a dockerized infrastructure.
##                 The following services are dockerized
##                   MariaDB (Database)
##                   RabbitMQ (Message Queue)
##                   Keystone (OpenStack Identity)
##                   Glance (OpenStack Image)
##                   Nova controller (OpenStack Compute: controller part)
##                 In addition the following services are installed bare metal
##                   Nova compute and network (openstack-nova-compute and openstack-nova-network)
##                   Dashboard (Openstack Horizon)
##                   Trinity API
##                   Trinity client
##                   Trinity dashboard additions
##                 Also the first tenant is created and the first virtual cluster is setup 
##author         : Abhishek Mukherjee
##email          : abhishek.mukherjee@clustervision.com

#------------------------------------------------------------------------------
# Setup the dockerized components
#------------------------------------------------------------------------------

REGISTRY="controller:5050"
TOPDIR="/trinity"
profiles=(
  "mariadb"
  "rabbitmq"
  "keystone"
  "glance"
  "nova_controller"        
)

declare -A ports
ports=(
  ["mariadb"]="3306"
  ["rabbitmq"]="5672 15672 4369 25672"
  ["keystone"]="5000 35357"
  ["glance"]="9191 9292"
  ["nova_controller"]="8773 8774 8775 6080 5900"
)

services=(
  "keystone"
  "glance"
  "nova"
)

keystone_endpoint="http://$(hostname -i):35357/v2.0"

for profile in "${profiles[@]}"; do
  docker build --rm=true -t ${REGISTRY}/${profile} ${TOPDIR}/${profile}
  docker push ${REGISTRY}/${profile}
  cmd_string=""
  for port in ${ports[${profile}]}; do
    cmd_string="${cmd_string} -p ${port}:${port}"
  done
  cmd_string="${cmd_string} --name=${profile} -d ${REGISTRY}/${profile}"
  docker run --net=host --privileged=true ${cmd_string}
  case ${profile} in 
    keystone)
      up=1;
      while [ ${up} -ne "0" ]; do 
        echo "Waiting for keystone to come up!"
        curl -s ${keystone_endpoint} 
        up=$?  
        sleep 10
      done
      for service in "${services[@]}"; do
        setup_service="${TOPDIR}/${profile}/${service}-setup.sh"
        echo ${setup_service}
        . ${setup_service}
      done
    ;;
  esac
  service=${profile//_/-}
  systemctl enable ${service}.service
done


#------------------------------------------------------------------------------
# Install and configure openstack-nova-compute and openstack-nova-network 
#------------------------------------------------------------------------------

# generic required packages
yum -y install openstack-selinux openstack-utils
# required for nova compute
yum -y install openstack-nova-compute openstack-nova-network openstack-nova-api
yum -y install sysfsutils

# Needed for nova-compute (no-mac-spoofing error)
yum -y install libvirt-daemon-config-nwfilter libvirt-daemon-driver-nwfilter

# Get config info
source /trinity/nova/config.sh

# Parameters and constants
#  NODE_IP=$(hostname -I| awk '{print $1}')
NODE_IP=$(hostname -i)

# Set SeLinux to permissive mode
setenforce 0

# Stop NetworkManager
systemctl stop NetworkManager
systemctl disable NetworkManager
killall dhclient
systemctl restart network

systemctl stop openstack-nova-compute.service openstack-nova-network.service openstack-nova-metadata-api.service

#-- Configure the openstack-nova-compute component

echo "----Configuring openstack-nova-compute: editing /etc/nova/nova.conf----"
# Set up the message broker (rabbit_mq)
# -- NOTE: The rpc_password needs to be identical to that in the openstack controller
# -- NOTE: Please, ensure that the entries below are identical to that on the openstack controller
#openstack-config --set /etc/nova/nova.conf DEFAULT rpc_backend rabbit
openstack-config --set /etc/nova/nova.conf DEFAULT rpc_backend nova.openstack.common.rpc.impl_kombu
openstack-config --set /etc/nova/nova.conf DEFAULT rabbit_host  ${OPENSTACK_CONTROLLER}
openstack-config --set /etc/nova/nova.conf DEFAULT rabbit_password ${RPC_PASS}

# set up the authentication service
# -- NOTE: The admin_password needs to be identical to that in the openstack controller
openstack-config --set /etc/nova/nova.conf DEFAULT auth_strategy keystone
openstack-config --set /etc/nova/nova.conf keystone_authtoken auth_uri http://${OPENSTACK_CONTROLLER}:5000/v2.0
openstack-config --set /etc/nova/nova.conf keystone_authtoken identity_uri http://${OPENSTACK_CONTROLLER}:35357
openstack-config --set /etc/nova/nova.conf keystone_authtoken admin_tenant_name services
openstack-config --set /etc/nova/nova.conf keystone_authtoken admin_user nova
openstack-config --set /etc/nova/nova.conf keystone_authtoken admin_password ${NOVA_PASS}
openstack-config --del /etc/nova/nova.conf keystone_authtoken auth_host
openstack-config --del /etc/nova/nova.conf keystone_authtoken auth_port
openstack-config --del /etc/nova/nova.conf keystone_authtoken auth_protocol

# configure my_ip
openstack-config --set /etc/nova/nova.conf DEFAULT my_ip ${NODE_IP}

# setup remote console access
openstack-config --set /etc/nova/nova.conf DEFAULT vnc_enabled True
openstack-config --set /etc/nova/nova.conf DEFAULT vncserver_lister 0.0.0.0
openstack-config --set /etc/nova/nova.conf DEFAULT vncserver_proxyclient_address ${NODE_IP}
openstack-config --set /etc/nova/nova.conf DEFAULT novncproxy_base_url http://${OPENSTACK_CONTROLLER}:6080/vnc_auto.html

# configure the location of the Image service
openstack-config --set /etc/nova/nova.conf glance host ${OPENSTACK_CONTROLLER}

# enable verbose logging
openstack-config --set /etc/nova/nova.conf DEFAULT verbose True
echo "-----------------------------------"


#-- Configure the openstack-nova-network component

echo "----Configuring openstack-nova-network: editing /etc/nova/nova.conf----"
# Parameters and constants
read ETH0 ETH1 ETH2 <<<$(ls /sys/class/net/ | grep "^e" | sort | head -3)

openstack-config --set /etc/nova/nova.conf DEFAULT network_api_class  nova.network.api.API
openstack-config --set /etc/nova/nova.conf DEFAULT security_group_api  nova
openstack-config --set /etc/nova/nova.conf DEFAULT firewall_driver  nova.virt.libvirt.firewall.IptablesFirewallDriver
openstack-config --set /etc/nova/nova.conf DEFAULT network_manager  nova.network.manager.FlatDHCPManager
openstack-config --set /etc/nova/nova.conf DEFAULT network_size  254
openstack-config --set /etc/nova/nova.conf DEFAULT allow_same_net_traffic  False
openstack-config --set /etc/nova/nova.conf DEFAULT multi_host  True
openstack-config --set /etc/nova/nova.conf DEFAULT send_arp_for_ha  True
openstack-config --set /etc/nova/nova.conf DEFAULT share_dhcp_address  True
openstack-config --set /etc/nova/nova.conf DEFAULT force_dhcp_release  True
openstack-config --set /etc/nova/nova.conf DEFAULT flat_network_bridge  br100
openstack-config --set /etc/nova/nova.conf DEFAULT flat_interface  ${ETH2}
openstack-config --set /etc/nova/nova.conf DEFAULT vlan_interface  ${ETH2}
openstack-config --set /etc/nova/nova.conf DEFAULT public_interface  ${ETH1}
echo "-----------------------------------"

# Start virtualization and nova-compute
systemctl restart libvirtd.service openstack-nova-compute.service
systemctl enable  libvirtd.service openstack-nova-compute.service
systemctl enable openstack-nova-network.service
systemctl start openstack-nova-network.service
systemctl enable openstack-nova-metadata-api.service
systemctl start openstack-nova-metadata-api.service


#------------------------------------------------------------------------------
# Install and configure Horizon 
#------------------------------------------------------------------------------
yum -y install --setopt=tsflags=nodocs python-keystoneclient python-glanceclient python-novaclient python-cinderclient
yum -y install --setopt=tsflags=nodocs openstack-dashboard httpd mod_wsgi memcached python-memcached
#yum -y install --setopt=tsflags=nodocs epel-release
#yum -y install --setopt=tsflags=nodocs http://rdo.fedorapeople.org/openstack-juno/rdo-release-juno.rpm

cp -LrT /trinity/horizon/rootimg/ /
chown -R apache:apache /usr/share/openstack-dashboard/static
echo 'Include "/etc/httpd/conf.modules.d/*.conf"' >> /etc/httpd/conf/httpd.conf
systemctl enable httpd.service memcached.service
systemctl start memcached.service
systemctl restart httpd.service

#-----------------------------------------------------------------
# Install the API server, client and dashboard additions
#-----------------------------------------------------------------

cp -LrT /trinity/openstack/rootimg/ /
# Assumes that /cluster and  /home are already mounted

# The Trinity API server init script requires the Linux Standard Base
yum -y install redhat-lsb

#-- The Trinity API server needs python Bottle
yum -y install epel-release
yum -y install python-pip
pip install bottle
pip install cherrypy

#-- Trinity API setup
cd /opt/trinity/trinity_api
python setup.py install
cd -
sed "s/127.0.0.1/$(hostname -i)/g" /etc/trinity/trinity_api.conf > /tmp/trinity_api.conf
mv -f /tmp/trinity_api.conf /etc/trinity/trinity_api.conf
mkdir -p /var/log/trinity

# Start the API
service trinity_api start
chkconfig trinity_api on

#-- Install the python client
cd /opt/trinity/trinity_client
python setup.py install
cd -
sed "s/127.0.0.1/$(hostname -i)/g" /etc/trinity/trinity_client.conf > /tmp/trinity_client.conf
mv -f /tmp/trinity_client.conf /etc/trinity/trinity_client.conf

#-- Install the dashboard additions
cd /opt/trinity/trinity_dashboard
sh setup.sh
cd -

service httpd restart


#-----------------------------------------------------------------
# Install the first cluster
#-----------------------------------------------------------------

sed -e "s/<TENANT>/admin/g" \
    -e "s/<USER>/admin/g" \
    -e "s/<PASSWORD>/system/g" \
    -e "s/<OPENSTACK>/$(hostname -i)/g" \
    /trinity/openstack/keystonerc > /root/keystonerc_admin
source /root/keystonerc_admin


#-- Download the base login node image (CentOS cloud image) and upload it to glance
CLOUD_IMAGE_URL="http://cloud.centos.org/centos/7/images/CentOS-7-x86_64-GenericCloud.qcow2"
CLOUD_IMAGE="/tmp/CentOS-7-x86_64-GenericCloud.qcow2"
CLOUD_IMAGE_FORMAT="qcow2"
CLOUD_CONTAINER_FORMAT="bare"
LOGIN_IMAGE="login"
curl -s ${CLOUD_IMAGE_URL} -o ${CLOUD_IMAGE}
glance image-create \
         --name "${LOGIN_IMAGE}" \
         --disk-format "${CLOUD_IMAGE_FORMAT}" \
         --container-format "${CLOUD_CONTAINER_FORMAT}" \
         --is-public True \
         --file "${CLOUD_IMAGE}"

#-- Create the Flat Network
read ETH0 ETH1 ETH2 <<<$(ls /sys/class/net/ | grep "^e" | sort | head -3)
BRIDGE="br100"
NETWORK_LABEL="novanetwork"
nova network-create \
       --fixed-range-v4 192.168.32.0/24 \
       --fixed-cidr 192.168.32.0/24 \
       --bridge-interface ${ETH2} \
       --bridge ${BRIDGE} \
       ${NETWORK_LABEL}
       

#-- Create the default cluster
FIRST_TENANT="a"
FIRST_USER="a"
FIRST_PASS="system"
FIRST_CLUSTER="vc-a"
FIRST_POOL="login_a"
FIRST_FLOATING="172.16.255.254"
LOGIN_SETUP="/trinity/login/setup.sh"
LOGIN_DATA="/root/.login_data"
LOGIN_NODE="login-a"
SKEL=".skel"

keystone tenant-create --name ${FIRST_TENANT}
keystone user-create --name ${FIRST_USER} --tenant ${FIRST_TENANT} --pass ${FIRST_PASS}
nova floating-ip-bulk-create --pool ${FIRST_POOL} ${FIRST_FLOATING}
mkdir -p /cluster/${FIRST_CLUSTER}
cp -Tr /cluster/${SKEL}/ /cluster/${FIRST_CLUSTER}/
mkdir -p /home/${FIRST_CLUSTER}

useradd -u 1002 -U munge --no-create-home
mkdir -p /cluster/${FIRST_CLUSTER}/etc/munge
[ -e  /cluster/${FIRST_CLUSTER}/etc/munge/munge.key ] && rm /cluster/${FIRST_CLUSTER}/etc/munge/munge.key
dd if=/dev/urandom bs=1 count=1024 > /cluster/${FIRST_CLUSTER}/etc/munge/munge.key
chown -R munge:munge /cluster/${FIRST_CLUSTER}/etc/munge
chmod u=rwx,go= /cluster/${FIRST_CLUSTER}/etc/munge
chmod u=r,go=   /cluster/${FIRST_CLUSTER}/etc/munge/munge.key

nodes=$(curl -k 'https://controller/xcatws/groups/vc-a/attrs/members?userName=trinity&password=trinity&pretty=1' | awk -F: '{if (NR==3) {print $2}}' | sed 's/"//g')
sed -e "s/<NODES>/${nodes}/g" -i /cluster/${FIRST_CLUSTER}/etc/slurm/slurm-nodes.conf
chmod u=rwx,go=rx /cluster/${FIRST_CLUSTER}/etc/slurm
chmod u=rw,go=rx  /cluster/${FIRST_CLUSTER}/etc/slurm/slurm.conf
chmod u=rw,go=r   /cluster/${FIRST_CLUSTER}/etc/slurm/slurm-nodes.conf
chmod ug=rw,o=r   /cluster/${FIRST_CLUSTER}/etc/slurm/slurm-user.conf

cp ${LOGIN_SETUP} ${LOGIN_DATA}

sed -e "s/FLOATING_IP=127.0.0.1/FLOATING_IP=${FIRST_FLOATING}/g" \
    -e "s/vc-a/${FIRST_CLUSTER}/g" \
    -i "${LOGIN_DATA}"

sed -e "s/<TENANT>/${FIRST_TENANT}/g" \
    -e "s/<USER>/${FIRST_USER}/g" \
    -e "s/<PASSWORD>/${FIRST_PASS}/g" \
    -e "s/<OPENSTACK>/$(hostname -i)/g" \
    /trinity/openstack/keystonerc > /root/keystonerc_${FIRST_TENANT}
source /root/keystonerc_${FIRST_TENANT}

nova floating-ip-create ${FIRST_POOL}
nova secgroup-add-rule default tcp 1 65535 0.0.0.0/0
nova secgroup-add-rule default icmp -1 -1 0.0.0.0/0
nova boot --flavor 2 --image ${LOGIN_IMAGE} --security-groups default --user-data ${LOGIN_DATA} ${LOGIN_NODE}
sleep 5
nova floating-ip-associate ${LOGIN_NODE} ${FIRST_FLOATING}

echo $0 finished >> /var/log/postinstall.log


