# This script finds which interface connects to the bmc network
# and sets an appropriate address on that interface.
# Determine bmc ip addresses (FIXME: this requires to be run as a postscript now)

# FIXME: needs better error handling in case we cannot find a BMC address
my_bmc_ip=$(host $(hostname)-bmc | cut -d' ' -f4)

my_bmc_ip=$(ipmitool-xcat lan print 1 | grep "IP Address              :" | awk -F: '{print $2}')

my_ip_on_bmc=$(echo ${my_bmc_ip} | awk -F. '{ printf "%d.%d.%d.%d",$1,$2,$3,254-$4 }')
other_bmc_ip=$(echo ${my_bmc_ip} | awk -F. '{ printf "%d.%d.%d.%d",$1,$2,$3,(2-($4+1)%2) }')

external_iface=$(ip route | grep ^default | awk '{print $5}')
internal_iface=$(ip -o link show | grep "state UP" | grep ether | grep -v $external_iface | awk -F: '{print $2}')

setup_bmc() {
    # Delete old ip addresses, they may be stale
    for iface in $(ip a | grep ${my_ip_on_bmc}/24 | awk -F' ' '{print $5}'); do
        ip addr del ${my_ip_on_bmc}/24 dev $iface
    done

    # Find on which interface we can reach the other controller's bmc address
    for iface in $(netstat -i | tail -n+3 | cut -d' ' -f1 | sort -u); do
        ip addr add ${my_ip_on_bmc}/24 dev $iface 2>/dev/null
        if ping -c1 -W1 ${other_bmc_ip} > /dev/null 2>&1; then
            bmc_iface=$iface
            #echo adding bmc address to $iface
            break
        fi
        ip addr del ${my_ip_on_bmc}/24 dev $iface
    done
}

setup_bmc

echo "BMC interface      :" $bmc_iface
echo "external interface :" $external_iface
echo "internal interface :" $internal_iface

