#!/bin/sh
#
#       /etc/rc.d/init.d/docker
#
#       Daemon for docker.io
#  	Adapted to start the fast container if no containers
#       are present.
#       
# chkconfig:   2345 95 95
# description: Daemon for docker.io

### BEGIN INIT INFO
# Provides:       docker
# Required-Start: $network cgconfig
# Required-Stop:
# Should-Start:
# Should-Stop:
# Default-Start: 2 3 4 5
# Default-Stop:  0 1 6
# Short-Description: start and stop docker
# Description: Daemon for docker.io
### END INIT INFO

# Source function library.
. /etc/rc.d/init.d/functions

prog="docker"
exec="/usr/bin/$prog"
pidfile="/var/run/$prog.pid"
lockfile="/var/lock/subsys/$prog"
logfile="/var/log/$prog"

[ -e /etc/sysconfig/$prog ] && . /etc/sysconfig/$prog

prestart() {
    service cgconfig status > /dev/null

    if [[ $? != 0 ]]; then
        service cgconfig start
    fi
}

poststart() {
    # ClusterVision
    sleep 1
    
    # get the latest version of the image
    docker pull controller:5050/compute 

    # Determine the container name and IP address
    # IP=$(host $(hostname) | awk -F' ' '{print $4}')
    NAME=$(hostname | sed s/node/c/)
    
    # Determine in which virtual cluster this node is active
    for VC in vc-{a..l}; do
        if host $NAME.$VC; then break; fi
    done
    IP=$(host ${NAME}.${VC} | awk -F' ' '{print $4}')

    # Set the gateway address on the controller node.
    GW=$(echo $IP | awk -F'/' '{print $1}' | awk -F'.' '{print $1"."$2".255.250"}')
    ip addr add ${GW}/16 dev docker0

    # Just a few cleanup actions for development. Since we use --rm
    # (and -r in the general docker), this should not be necessary.
    if [ $(docker ps -q | wc -l) -ne 0 ]; then
       docker stop $(docker ps -q)
    fi
    if [ $(docker ps -aq | wc -l) -ne 0 ]; then
       docker rm $(docker ps -aq)
    fi

    # Start the container
    docker run \
       -n=false \
       --dns-search="${VC}" \
       --dns=10.141.255.254 \
       --lxc-conf="lxc.network.type = veth" \
       --lxc-conf="lxc.network.ipv4 = ${IP}/16" \
       --lxc-conf="lxc.network.ipv4.gateway = ${GW}" \
       --lxc-conf="lxc.network.link = docker0" \
       --lxc-conf="lxc.network.name = eth0" \
       --lxc-conf="lxc.network.flags = up" \
       --privileged \
       -v /dev/infiniband:/dev/infiniband \
       -v /usr/local:/usr/local \
       -v /root:/root \
       -v /cluster/${VC}:/cluster \
       --hostname=${NAME} \
       --rm -t controller:5050/compute &
}

start() {
    [ -x $exec ] || exit 5

    if ! [ -f $pidfile ]; then
        prestart
        printf "Starting $prog:\t"
        echo "\n$(date)\n" >> $logfile
        echo $exec -d -e lxc $other_args &>> $logfile &
        $exec -d -e lxc $other_args &>> $logfile &
        pid=$!
        touch $lockfile
        poststart
        success
        echo
    else
        failure
        echo
        printf "$pidfile still exists...\n"
        exit 7
    fi
}

stop() {
    echo -n $"Stopping $prog: "
    killproc -p $pidfile $prog
    retval=$?
    echo
    [ $retval -eq 0 ] && rm -f $lockfile
    return $retval
}

restart() {
    stop
    start
}

reload() {
    restart
}

force_reload() {
    restart
}

rh_status() {
    status -p $pidfile $prog
}

rh_status_q() {
    rh_status >/dev/null 2>&1
}

case "$1" in
    start)
        rh_status_q && exit 0
        $1
        ;;
    stop)
        rh_status_q || exit 0
        $1
        ;;
    restart)
        $1
        ;;
    reload)
        rh_status_q || exit 7
        $1
        ;;
    force-reload)
        force_reload
        ;;
    status)
        rh_status
        ;;
    condrestart|try-restart)
        rh_status_q || exit 0
        restart
        ;;
    *)
        echo $"Usage: $0 {start|stop|status|restart|condrestart|try-restart|reload|force-reload}"
        exit 2
esac

exit $?
