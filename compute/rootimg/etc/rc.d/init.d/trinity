#!/bin/bash
#
#       /etc/rc.d/init.d/trinity
#
#       Daemon for trinity compute nodes
#       
# chkconfig:   2345 95 95
# description: Daemon for trinity

### BEGIN INIT INFO
# Provides:       trinity
# Required-Start: $network docker
# Required-Stop:
# Should-Start:
# Should-Stop:
# Default-Start: 2 3 4 5
# Default-Stop:  0 1 6
# Short-Description: start and stop trinity
# Description: Daemon for trinity
### END INIT INFO

# Source function library.
. /etc/rc.d/init.d/functions

start() {
    echo "Starting Trinity"

    # disable the docker bridge
    ip link set docker0 down 2>/dev/null|| true
    brctl delbr docker0 2>/dev/null || true

    # Determine our container name
    NAME=$(hostname -s | sed s/node/c/)

    while [ 1 ]; do 
        # Determine in which virtual cluster this node is active
        #for VC in vc-{a..l}; do
        for VC in $(ls /cluster | grep "^vc-"); do
            if host $NAME.$VC; then found=1; break; fi
        done

        if [ ! $found ]; then
            echo "Could not determine cluster membership for this node. Sleeping now."
            sleep 5
            continue;
        fi

        IP=$(host ${NAME}.${VC} | awk -F' ' '{print $4}')
        GW=$(echo $IP | awk -F. '{ print $1"."$2".255.254" }')
     
        # Check a few directories and files
        if [ ! -d /cluster/${VC} ]; then
            echo "No cluster directory found for ${VC}."; 
            sleep 5
            continue;
        fi
        
        if ! ping -c 5 -W 5 login.${VC}; then
            echo "No login node found for ${VC}."; 
            sleep 5
            continue;
        fi
        # All tests succeeded, just get on with it.
        break;
    done


    # check if there is a cluster specific image
    if wget http://controller:5050/v1/repositories/library/${VC}/tags -q -O-; then
       IMAGE=${VC}
    else
       IMAGE=trinity
    fi

    # if there is a newer image, remove the container
    if docker pull controller:5050/${IMAGE} | tail -1 | grep "Downloaded newer"; then 
        docker stop trinity
        docker rm trinity
    fi

    # determine the ethernet device name
    # Fix for 229
    ETH1=$(ip route | grep default | awk '{print $5}' | head -1)

    state=$(docker inspect --format='{{.State.Running}}' trinity)
    case $state in
        true)
            ;;
        false)
            docker start trinity
            /usr/local/sbin/pipework ${ETH1} trinity ${IP}/16@${GW}
            ;;
        *)
            docker run \
               --net=none \
               --device=/dev/infiniband/issm0 \
               --device=/dev/infiniband/rdma_cm \
               --device=/dev/infiniband/ucm0  \
               --device=/dev/infiniband/umad0 \
               --device=/dev/infiniband/uverbs0 \
               -v /trinity/clustervision:/trinity/clustervision \
               -v /root:/root \
               -v /home/${VC}:/home \
               -v /cluster/${VC}:/cluster \
               -v /cluster/${VC}/etc/slurm:/etc/slurm \
               -v /cluster/${VC}/etc/munge:/etc/munge \
               -v /cluster/${VC}/.modulespath:/usr/share/Modules/init/.modulespath \
               --hostname=${NAME}.${VC} \
               --dns-search=${VC} \
               --name=trinity \
               -d controller:5050/${IMAGE}
            /usr/local/sbin/pipework ${ETH1} trinity ${IP}/16@${GW}
        ;;
    esac
}

stop() {
    echo -n "Stopping trinity "
    docker stop trinity
}

restart() {
    stop
    start
}

reload() {
    restart
}

force-reload() {
    docker stop trinity
    docker rm trinity
    start
}

rh_status() {
    state=$(docker inspect --format='{{.State.Running}}' trinity 2>/dev/null)
    test -n "$state" -a "$state" = true
}

rh_status_q() {
    rh_status >/dev/null 2>&1
}

case "$1" in
    start)
        rh_status_q && exit 0
        $1
        ;;
    stop)
        rh_status_q || exit 0
        $1
        ;;
    restart)
        $1
        ;;
    reload)
        rh_status_q || exit 7
        force-reload
        ;;
    force-reload)
        force-reload
        ;;
    status)
        rh_status
        ;;
    condrestart|try-restart)
        rh_status_q || exit 0
        restart
        ;;
    *)
        echo $"Usage: $0 {start|stop|status|restart|condrestart|try-restart|reload|force-reload}"
        exit 2
esac

exit $?
